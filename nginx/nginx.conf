events {}

    stream {

    upstream apps {
        server app1:3000;
        server app2:9999;
    }
    
    log_format layer4_format '$remote_addr [$time_local] "$proxy_protocol_addr" '
                             '"$proxy_protocol_port" "$upstream_addr" '
                             '$protocol $status $bytes_sent $bytes_received '    ;
                        
    server {
        listen 9000;
        proxy_pass apps;

        # If the backend server does not respond within 10 seconds, the connection will be closed.
        # For example, if a client request is being proxied to app1 and app1 takes more than 10 seconds to send data back, the connection will be terminated by Nginx.
        proxy_timeout 10s;

        # If Nginx cannot establish a connection to the backend server within 10 seconds, it will stop trying.
        # For example, if Nginx attempts to connect to app1 and it takes more than 10 seconds to establish the connection, Nginx will terminate the attempt and can try another backend server if configured to do so.
        proxy_connect_timeout 10s;

        # Error handling
        # If an error or timeout occurs, try the next upstream server.
        proxy_next_upstream on;

        # Enable Logging
        access_log /var/log/nginx/stream_access.log layer4_format;
        error_log /var/log/nginx/stream_error.log;
    }
  
}


